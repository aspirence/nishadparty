# Generated by Django 5.0 on 2025-09-05 05:27

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="GovernmentScheme",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "scheme_code",
                    models.CharField(blank=True, max_length=50, unique=True),
                ),
                ("description", models.TextField()),
                ("eligibility_criteria", models.TextField()),
                ("application_process", models.TextField()),
                ("required_documents", models.JSONField(default=list)),
                ("deadline", models.DateField(blank=True, null=True)),
                (
                    "benefit_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "scheme_type",
                    models.CharField(
                        choices=[
                            ("FISHING", "Fishing Related"),
                            ("BOAT", "Boat Subsidy"),
                            ("EDUCATION", "Education"),
                            ("HEALTH", "Health"),
                            ("HOUSING", "Housing"),
                            ("EMPLOYMENT", "Employment"),
                            ("INSURANCE", "Insurance"),
                            ("PENSION", "Pension"),
                            ("FINANCIAL", "Financial Assistance"),
                        ],
                        max_length=20,
                    ),
                ),
                ("implementing_agency", models.CharField(max_length=200)),
                ("contact_details", models.JSONField(default=dict)),
                ("website_url", models.URLField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                ("state", models.CharField(blank=True, max_length=50)),
                ("district", models.CharField(blank=True, max_length=100)),
                ("constituency", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="WeatherAlert",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("region", models.CharField(max_length=100)),
                (
                    "alert_type",
                    models.CharField(
                        choices=[
                            ("STORM", "Storm Warning"),
                            ("CYCLONE", "Cyclone Alert"),
                            ("HEAVY_RAIN", "Heavy Rain"),
                            ("ROUGH_SEA", "Rough Sea Conditions"),
                            ("FISHING_BAN", "Fishing Ban"),
                            ("HIGH_TIDE", "High Tide Alert"),
                        ],
                        max_length=20,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("CRITICAL", "Critical"),
                        ],
                        max_length=10,
                    ),
                ),
                ("valid_from", models.DateTimeField()),
                ("valid_until", models.DateTimeField()),
                ("issued_by", models.CharField(max_length=100)),
                ("official_reference", models.CharField(blank=True, max_length=100)),
                ("affected_areas", models.JSONField(default=list)),
                ("safety_instructions", models.TextField()),
                ("contact_numbers", models.JSONField(default=list)),
                ("is_active", models.BooleanField(default=True)),
                ("auto_send_sms", models.BooleanField(default=False)),
                ("sms_sent", models.BooleanField(default=False)),
                ("recipients_count", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["-valid_from"],
            },
        ),
        migrations.CreateModel(
            name="CommunityEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("event_type", models.CharField(max_length=100)),
                ("date_time", models.DateTimeField()),
                ("location", models.CharField(max_length=200)),
                ("target_community", models.CharField(max_length=100)),
                ("expected_participants", models.IntegerField(default=0)),
                ("actual_participants", models.IntegerField(default=0)),
                (
                    "budget",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                ("sponsors", models.JSONField(default=list)),
                ("agenda", models.JSONField(default=list)),
                ("outcomes", models.TextField(blank=True)),
                ("photos", models.JSONField(default=list)),
                ("feedback_summary", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "organizer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-date_time"],
            },
        ),
        migrations.CreateModel(
            name="FishingLicense",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("license_number", models.CharField(max_length=50, unique=True)),
                ("license_type", models.CharField(max_length=50)),
                ("issued_date", models.DateField()),
                ("expiry_date", models.DateField()),
                ("issuing_authority", models.CharField(max_length=200)),
                ("fishing_areas", models.JSONField(default=list)),
                ("boat_details", models.JSONField(default=dict)),
                ("restrictions", models.TextField(blank=True)),
                ("renewal_fee", models.DecimalField(decimal_places=2, max_digits=8)),
                ("is_active", models.BooleanField(default=True)),
                ("renewal_reminder_sent", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-issued_date"],
            },
        ),
        migrations.CreateModel(
            name="MarketPrice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("fish_type", models.CharField(max_length=100)),
                ("market_location", models.CharField(max_length=100)),
                ("price_per_kg", models.DecimalField(decimal_places=2, max_digits=8)),
                ("date_recorded", models.DateField()),
                (
                    "demand_level",
                    models.CharField(
                        choices=[
                            ("HIGH", "High Demand"),
                            ("MEDIUM", "Medium Demand"),
                            ("LOW", "Low Demand"),
                        ],
                        max_length=10,
                    ),
                ),
                ("quality_grade", models.CharField(blank=True, max_length=20)),
                ("supplier_count", models.IntegerField(default=0)),
                (
                    "quantity_available",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("seasonal_factor", models.CharField(blank=True, max_length=100)),
                ("weather_impact", models.TextField(blank=True)),
                (
                    "transportation_cost",
                    models.DecimalField(decimal_places=2, default=0, max_digits=6),
                ),
                ("verified", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "recorded_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-date_recorded"],
                "unique_together": {("fish_type", "market_location", "date_recorded")},
            },
        ),
        migrations.CreateModel(
            name="SchemeApplication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "application_id",
                    models.CharField(blank=True, max_length=50, unique=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("SUBMITTED", "Submitted"),
                            ("UNDER_REVIEW", "Under Review"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("PENDING_DOCUMENTS", "Pending Documents"),
                            ("COMPLETED", "Completed"),
                        ],
                        default="DRAFT",
                        max_length=20,
                    ),
                ),
                ("applied_date", models.DateField(blank=True, null=True)),
                ("documents_submitted", models.JSONField(default=dict)),
                ("additional_info", models.JSONField(default=dict)),
                ("follow_up_date", models.DateField(blank=True, null=True)),
                ("approval_date", models.DateField(blank=True, null=True)),
                ("rejection_reason", models.TextField(blank=True)),
                ("notes", models.TextField(blank=True)),
                ("reference_number", models.CharField(blank=True, max_length=100)),
                (
                    "benefit_received",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "assisted_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assisted_applications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "scheme",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="community.governmentscheme",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
                "unique_together": {("user", "scheme")},
            },
        ),
    ]
